{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MBAIORBE II\\\\Desktop\\\\projet japhet\\\\client\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_DATA = \"get/data/user\";\nexport const getId = id => {\n  return async dispatch => {\n    await axios({\n      method: 'GET',\n      url: \"http://localhost:9000/api/\" + id\n    }).then(data => {\n      dispatch({\n        type: GET_DATA,\n        payload: data.data\n      });\n    });\n  };\n};\nconst initialState = {};\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_DATA:\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\nstore.subscribe(() => console.log(store.getState()));\nReactDOM.render( /*#__PURE__*/_jsxDEV(Provider, {\n  store: store,\n  children: /*#__PURE__*/_jsxDEV(React.StrictMode, {\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 3\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 41,\n  columnNumber: 3\n}, this), document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();","map":{"version":3,"sources":["C:/Users/MBAIORBE II/Desktop/projet japhet/client/src/index.js"],"names":["React","ReactDOM","App","reportWebVitals","Provider","applyMiddleware","createStore","thunk","axios","GET_DATA","getId","id","dispatch","method","url","then","data","type","payload","initialState","rootReducer","state","action","store","subscribe","console","log","getState","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAAQC,QAAR,QAAuB,aAAvB;AACA,SAASC,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,QAAQ,GAAE,eAAhB;AAEA,OAAO,MAAMC,KAAK,GAAEC,EAAD,IAAM;AACvB,SAAO,MAAOC,QAAP,IAAkB;AACvB,UAAMJ,KAAK,CAAC;AACVK,MAAAA,MAAM,EAAE,KADE;AAEVC,MAAAA,GAAG,EAAC,+BAA6BH;AAFvB,KAAD,CAAL,CAGHI,IAHG,CAGGC,IAAD,IAAQ;AACdJ,MAAAA,QAAQ,CAAC;AAACK,QAAAA,IAAI,EAACR,QAAN;AAAgBS,QAAAA,OAAO,EAACF,IAAI,CAACA;AAA7B,OAAD,CAAR;AACD,KALK,CAAN;AAMD,GAPD;AAQD,CATM;AAWP,MAAMG,YAAY,GAAE,EAApB;;AACA,MAAMC,WAAW,GAAE,CAACC,KAAK,GAACF,YAAP,EAAqBG,MAArB,KAA8B;AAC/C,UAAOA,MAAM,CAACL,IAAd;AACE,SAAKR,QAAL;AACE,aAAOa,MAAM,CAACJ,OAAd;;AACF;AACE,aAAOG,KAAP;AAJJ;AAMD,CAPD;;AASA,MAAME,KAAK,GAACjB,WAAW,CACrBc,WADqB,EAErBf,eAAe,CAACE,KAAD,CAFM,CAAvB;AAKAgB,KAAK,CAACC,SAAN,CAAgB,MAAIC,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,QAAN,EAAZ,CAApB;AACA1B,QAAQ,CAAC2B,MAAT,eACE,QAAC,QAAD;AAAU,EAAA,KAAK,EAAEL,KAAjB;AAAA,yBACA,QAAC,KAAD,CAAO,UAAP;AAAA,2BACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,QADF,EAMEM,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CANF,E,CASA;AACA;AACA;;AACA3B,eAAe","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux'\nimport { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk'\nimport axios from 'axios';\n\nconst GET_DATA =\"get/data/user\"\n\nexport const getId=(id)=>{\n  return async (dispatch)=>{\n    await axios({\n      method: 'GET',\n      url:\"http://localhost:9000/api/\"+id,\n    }).then((data)=>{\n      dispatch({type:GET_DATA, payload:data.data})\n    })\n  }\n}\n\nconst initialState ={}\nconst rootReducer =(state=initialState, action)=>{\n  switch(action.type){\n    case GET_DATA:\n      return action.payload\n    default:\n      return state\n  }\n}\n\nconst store=createStore(\n  rootReducer,\n  applyMiddleware(thunk)\n)\n\nstore.subscribe(()=>console.log(store.getState()));\nReactDOM.render(\n  <Provider store={store}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"]},"metadata":{},"sourceType":"module"}